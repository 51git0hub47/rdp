name: Public Minecraft Server

on:
  workflow_dispatch:
    inputs:
      restore_world:
        description: 'Restore previous world backup'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      enable_rdp:
        description: 'Enable RDP access'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'
      tunnel_service:
        description: 'Choose tunnel service'
        required: false
        default: 'cloudflared'
        type: choice
        options:
        - 'cloudflared'
        - 'ngrok'

jobs:
  public-minecraft:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Configure Core RDP Settings (if enabled)
        if: github.event.inputs.enable_rdp == 'true'
        run: |
          # Enable RDP for server management
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          Restart-Service -Name TermService -Force
          # Create admin user
          $password = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 12 | ForEach-Object {[char]$_})
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          try { Remove-LocalUser -Name "Admin" -ErrorAction SilentlyContinue } catch {}
          New-LocalUser -Name "Admin" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "Admin"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Admin"
          
          echo "ADMIN_PASSWORD=$password" >> $env:GITHUB_ENV
          echo "RDP_ENABLED=true" >> $env:GITHUB_ENV

      - name: Install Tailscale (if RDP enabled)
        if: github.event.inputs.enable_rdp == 'true' && env.TAILSCALE_AUTH_KEY != ''
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if ([string]::IsNullOrEmpty($env:TAILSCALE_AUTH_KEY)) {
            Write-Host "⚠️ TAILSCALE_AUTH_KEY not set in secrets"
            echo "TAILSCALE_CONFIGURED=false" >> $env:GITHUB_ENV
            exit 0
          }
          
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          echo "TAILSCALE_CONFIGURED=true" >> $env:GITHUB_ENV

      - name: Connect to Tailscale (if RDP enabled)
        if: github.event.inputs.enable_rdp == 'true' && env.TAILSCALE_CONFIGURED == 'true'
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=mc-public-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              try {
                  $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
                  if ($tsIP) { $tsIP = $tsIP.Trim() }
              } catch { Start-Sleep -Seconds 3 }
              $retries++
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Download and Setup Minecraft Server
        run: |
          # Create server directory
          $serverDir = "C:\MinecraftServer"
          New-Item -Path $serverDir -ItemType Directory -Force
          
          # Updated Minecraft server download URLs - use official Mojang URLs
          $mcUrls = @(
              "https://minecraft.azureedge.net/bin-win/bedrock-server-1.21.95.1.zip",
              "https://minecraft.azureedge.net/bin-win/bedrock-server-1.21.93.4.zip",
              "https://minecraft.azureedge.net/bin-win/bedrock-server-1.21.92.3.zip"
          )
          
          $zipPath = "$serverDir\bedrock-server.zip"
          $downloaded = $false
          
          foreach ($url in $mcUrls) {
              try {
                  Write-Host "Attempting to download Minecraft Bedrock Server from: $url"
                  
                  # Set security protocol
                  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                  
                  # Try with proper headers
                  $headers = @{
                      'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                  }
                  
                  Invoke-WebRequest -Uri $url -OutFile $zipPath -Headers $headers -TimeoutSec 300
                  
                  # Verify download
                  if ((Test-Path $zipPath) -and ((Get-Item $zipPath).Length -gt 1MB)) {
                      $downloaded = $true
                      Write-Host "✅ Successfully downloaded from: $url"
                      break
                  } else {
                      Write-Host "❌ Downloaded file is too small or missing"
                      Remove-Item $zipPath -ErrorAction SilentlyContinue
                  }
              } catch {
                  Write-Host "❌ Failed to download from $url : $($_.Exception.Message)"
                  Remove-Item $zipPath -ErrorAction SilentlyContinue
                  continue
              }
          }
          
          if (-not $downloaded) {
              Write-Error "❌ Failed to download Minecraft server from all sources"
              exit 1
          }
          
          Write-Host "📦 Extracting server files..."
          try {
              Expand-Archive -Path $zipPath -DestinationPath $serverDir -Force
              Remove-Item $zipPath -ErrorAction SilentlyContinue
          } catch {
              Write-Error "❌ Failed to extract server files: $($_.Exception.Message)"
              exit 1
          }
          
          # Verify server executable exists
          if (-not (Test-Path "$serverDir\bedrock_server.exe")) {
              Write-Error "❌ bedrock_server.exe not found after extraction"
              exit 1
          }
          
          # Accept EULA
          Set-Content -Path "$serverDir\eula.txt" -Value "eula=true"
          
          Write-Host "✅ Minecraft server downloaded, extracted, and EULA accepted"

      - name: Setup Backup System
        run: |
          # Create backup directory
          New-Item -Path "C:\WorldBackups" -ItemType Directory -Force
          Write-Host "✅ Backup system initialized"

      - name: Restore Previous World (if requested)
        if: github.event.inputs.restore_world == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "🔄 Attempting to restore previous world..."
          
          try {
              # Get list of artifacts from this repo
              $artifactUrl = "https://api.github.com/repos/${{ github.repository }}/actions/artifacts"
              $headers = @{ 
                  Authorization = "Bearer $env:GITHUB_TOKEN"
                  Accept = "application/vnd.github+json"
              }
              
              $artifacts = Invoke-RestMethod -Uri $artifactUrl -Headers $headers
              $latestBackup = $artifacts.artifacts | Where-Object { 
                  $_.name -like "minecraft-world-backups-*" -and $_.expired -eq $false 
              } | Sort-Object created_at -Descending | Select-Object -First 1
              
              if ($latestBackup) {
                  Write-Host "📦 Found backup artifact: $($latestBackup.name)"
                  Write-Host "📅 Created: $($latestBackup.created_at)"
                  
                  # Download the artifact
                  $downloadUrl = $latestBackup.archive_download_url
                  $backupZip = "$env:TEMP\world_restore.zip"
                  
                  Write-Host "⬇️ Downloading backup..."
                  Invoke-WebRequest -Uri $downloadUrl -Headers $headers -OutFile $backupZip
                  
                  # Extract to temporary location first
                  $tempExtract = "$env:TEMP\extracted_backup"
                  New-Item -Path $tempExtract -ItemType Directory -Force
                  Expand-Archive -Path $backupZip -DestinationPath $tempExtract -Force
                  
                  # Find the actual world backup files and restore them
                  $backupFiles = Get-ChildItem -Path $tempExtract -Filter "*.zip" -Recurse
                  if ($backupFiles.Count -gt 0) {
                      $latestWorldBackup = $backupFiles | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                      Write-Host "🌍 Restoring world from: $($latestWorldBackup.Name)"
                      
                      # Create worlds directory and restore
                      $worldsDir = "C:\MinecraftServer\worlds"
                      New-Item -Path $worldsDir -ItemType Directory -Force
                      Expand-Archive -Path $latestWorldBackup.FullName -DestinationPath $worldsDir -Force
                      
                      Write-Host "✅ World successfully restored!"
                      echo "WORLD_RESTORED=true" >> $env:GITHUB_ENV
                  } else {
                      Write-Host "⚠️ No world backup files found in artifact"
                      echo "WORLD_RESTORED=false" >> $env:GITHUB_ENV
                  }
                  
                  # Cleanup
                  Remove-Item $backupZip -Force -ErrorAction SilentlyContinue
                  Remove-Item $tempExtract -Recurse -Force -ErrorAction SilentlyContinue
                  
              } else {
                  Write-Host "⚠️ No previous world backup found, starting with fresh world"
                  echo "WORLD_RESTORED=false" >> $env:GITHUB_ENV
              }
          } catch {
              Write-Host "❌ Error restoring world: $($_.Exception.Message)"
              Write-Host "Starting with fresh world instead"
              echo "WORLD_RESTORED=false" >> $env:GITHUB_ENV
          }

      - name: Install Tunnel Service
        run: |
          $tunnelService = "${{ github.event.inputs.tunnel_service }}"
          Write-Host "Installing tunnel service: $tunnelService"
          
          switch ($tunnelService) {
              "cloudflared" {
                  Write-Host "📥 Installing Cloudflare Tunnel..."
                  $cloudflaredUrl = "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe"
                  $cloudflaredPath = "C:\cloudflared\cloudflared.exe"
                  New-Item -Path "C:\cloudflared" -ItemType Directory -Force
                  Invoke-WebRequest -Uri $cloudflaredUrl -OutFile $cloudflaredPath
                  Write-Host "✅ Cloudflare Tunnel installed"
              }
              
              "ngrok" {
                  Write-Host "📥 Installing ngrok..."
                  $ngrokUrl = "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip"
                  $ngrokPath = "$env:TEMP\ngrok.zip"
                  Invoke-WebRequest -Uri $ngrokUrl -OutFile $ngrokPath
                  New-Item -Path "C:\ngrok" -ItemType Directory -Force
                  Expand-Archive -Path $ngrokPath -DestinationPath "C:\ngrok" -Force
                  Remove-Item $ngrokPath
                  Write-Host "✅ ngrok installed"
              }
              
              default {
                  Write-Error "Unknown tunnel service: $tunnelService"
                  exit 1
              }
          }

      - name: Start Minecraft Server
        run: |
          $serverDir = "C:\MinecraftServer"
          Write-Host "Starting Minecraft server..."
          
          if ($env:WORLD_RESTORED -eq "true") {
              Write-Host "🔄 Starting server with restored world..."
          } else {
              Write-Host "🆕 Starting server with fresh world..."
          }
          
          # Configure server properties if needed
          $serverPropsPath = "$serverDir\server.properties"
          if (Test-Path $serverPropsPath) {
              # Ensure server is accessible
              (Get-Content $serverPropsPath) -replace 'server-port=19132', 'server-port=19132' | Set-Content $serverPropsPath
              (Get-Content $serverPropsPath) -replace 'online-mode=true', 'online-mode=false' | Set-Content $serverPropsPath
          }
          
          # Start server with proper output redirection
          $serverProcess = Start-Process -FilePath "$serverDir\bedrock_server.exe" -WorkingDirectory $serverDir -PassThru -NoNewWindow
          
          if (-not $serverProcess) {
              Write-Error "Failed to start Minecraft server process"
              exit 1
          }
          
          echo "SERVER_PID=$($serverProcess.Id)" >> $env:GITHUB_ENV
          
          # Wait for server to fully start
          Write-Host "⏳ Waiting for server startup..."
          Start-Sleep -Seconds 20
          
          # Verify server is still running
          if (Get-Process -Id $serverProcess.Id -ErrorAction SilentlyContinue) {
              Write-Host "✅ Minecraft server started successfully!"
          } else {
              Write-Error "Minecraft server process has stopped"
              exit 1
          }

      - name: Expose Server with Tunnel
        run: |
          $tunnelService = "${{ github.event.inputs.tunnel_service }}"
          Write-Host "Starting tunnel service: $tunnelService"
          
          switch ($tunnelService) {
              "cloudflared" {
                  Write-Host "🚀 Starting Cloudflare Tunnel..."
                  
                  # Start tunnel with proper logging
                  $tunnelArgs = @(
                      "tunnel",
                      "--url", "udp://localhost:19132"
                  )
                  
                  $tunnelProcess = Start-Process -FilePath "C:\cloudflared\cloudflared.exe" -ArgumentList $tunnelArgs -PassThru -NoNewWindow
                  
                  if (-not $tunnelProcess) {
                      Write-Error "Failed to start Cloudflare tunnel"
                      exit 1
                  }
                  
                  echo "TUNNEL_PID=$($tunnelProcess.Id)" >> $env:GITHUB_ENV
                  echo "TUNNEL_SERVICE=cloudflared" >> $env:GITHUB_ENV
                  
                  # Wait for tunnel to establish
                  Write-Host "⏳ Waiting for tunnel to establish..."
                  Start-Sleep -Seconds 15
                  
                  $publicUrl = "Cloudflare tunnel active - check process output"
                  echo "PUBLIC_URL=$publicUrl" >> $env:GITHUB_ENV
                  Write-Host "✅ Cloudflare tunnel started"
              }
              
              "ngrok" {
                  Write-Host "🚀 Starting ngrok tunnel..."
                  
                  # Start ngrok tunnel
                  $tunnelProcess = Start-Process -FilePath "C:\ngrok\ngrok.exe" -ArgumentList "udp", "19132" -PassThru -NoNewWindow
                  
                  if (-not $tunnelProcess) {
                      Write-Error "Failed to start ngrok tunnel"
                      exit 1
                  }
                  
                  echo "TUNNEL_PID=$($tunnelProcess.Id)" >> $env:GITHUB_ENV
                  echo "TUNNEL_SERVICE=ngrok" >> $env:GITHUB_ENV
                  
                  # Wait for ngrok to start
                  Write-Host "⏳ Waiting for ngrok to start..."
                  Start-Sleep -Seconds 15
                  
                  # Try to get ngrok URL
                  $publicUrl = "ngrok tunnel active - check localhost:4040"
                  $retries = 0
                  
                  while ($retries -lt 5) {
                      try {
                          $ngrokInfo = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -TimeoutSec 5
                          if ($ngrokInfo.tunnels -and $ngrokInfo.tunnels.Count -gt 0) {
                              $publicUrl = $ngrokInfo.tunnels[0].public_url -replace "udp://", ""
                              break
                          }
                      } catch {
                          Write-Host "Attempt $($retries + 1) to get ngrok URL failed, retrying..."
                      }
                      $retries++
                      Start-Sleep -Seconds 3
                  }
                  
                  echo "PUBLIC_URL=$publicUrl" >> $env:GITHUB_ENV
                  Write-Host "✅ ngrok tunnel started"
              }
          }

      - name: Initial World Backup
        run: |
          # Wait for world to be properly generated
          Write-Host "⏳ Waiting for world generation (90 seconds)..."
          Start-Sleep -Seconds 90
          
          # Create initial backup
          $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
          $backupName = "initial_backup_$timestamp"
          $backupPath = "C:\WorldBackups\$backupName.zip"
          
          Write-Host "💾 Creating initial world backup..."
          
          # Check for world data
          $worldsPath = "C:\MinecraftServer\worlds"
          
          if (Test-Path $worldsPath) {
              $worldContent = Get-ChildItem $worldsPath -Recurse -ErrorAction SilentlyContinue
              if ($worldContent.Count -gt 0) {
                  try {
                      Compress-Archive -Path "$worldsPath\*" -DestinationPath $backupPath -Force
                      Write-Host "✅ Initial backup created successfully: $backupName"
                  } catch {
                      Write-Host "⚠️ Initial backup failed: $($_.Exception.Message)"
                  }
              } else {
                  Write-Host "⚠️ No world data found yet"
              }
          } else {
              Write-Host "⚠️ Worlds directory not found yet"
          }

      - name: Display Server Information
        run: |
          Write-Host ""
          Write-Host "═══════════════════════════════════════════════════════════════════"
          Write-Host "                🎮 PUBLIC MINECRAFT SERVER WITH BACKUPS 🎮          "
          Write-Host "═══════════════════════════════════════════════════════════════════"
          Write-Host ""
          
          Write-Host "🌍 PUBLIC SERVER STATUS: RUNNING"
          Write-Host "🔧 Tunnel Service: ${{ github.event.inputs.tunnel_service }}"
          Write-Host "🎯 Server Port: 19132 (UDP)"
          
          if ($env:PUBLIC_URL -ne "Unknown") {
              Write-Host "📡 Public Address: $env:PUBLIC_URL"
          } else {
              Write-Host "📡 Public Address: Check tunnel logs manually"
          }
          
          if ($env:WORLD_RESTORED -eq "true") {
              Write-Host "🔄 World Status: RESTORED from previous session"
          } else {
              Write-Host "🆕 World Status: FRESH world"
          }
          Write-Host ""
          Write-Host "💾 BACKUP SCHEDULE:"
          Write-Host "   • Initial: After world generation"
          Write-Host "   • Periodic: Every 30 minutes"
          Write-Host "   • Final: When server stops"
          Write-Host ""
          Write-Host "📱 How to connect:"
          Write-Host "1. Open Minecraft Bedrock Edition"
          Write-Host "2. Go to Play → Servers → Add Server"
          Write-Host "3. Enter the server address above"
          Write-Host "4. Connect and enjoy!"
          Write-Host ""
          
          if ("${{ github.event.inputs.enable_rdp }}" -eq "true") {
              Write-Host "🖥️  RDP Access (for server configuration):"
              if ($env:TAILSCALE_IP) {
                  Write-Host "   Connect to: $env:TAILSCALE_IP"
                  Write-Host "   Username: Admin"
                  Write-Host "   Password: $env:ADMIN_PASSWORD"
              } else {
                  Write-Host "   ⚠️ RDP enabled but Tailscale not configured"
                  Write-Host "   To enable RDP: Add TAILSCALE_AUTH_KEY to repository secrets"
              }
          } else {
              Write-Host "🖥️  RDP Access: DISABLED"
          }
          
          Write-Host ""
          Write-Host "═══════════════════════════════════════════════════════════════════"
          Write-Host ""

      - name: Monitor Server with Auto-Backup
        run: |
          $startTime = Get-Date
          $lastBackup = Get-Date
          $counter = 0
          $backupCounter = 1
          
          Write-Host "🟢 PUBLIC Minecraft Server is LIVE with AUTO-BACKUP!"
          Write-Host "🌍 Tunnel: ${{ github.event.inputs.tunnel_service }}"
          Write-Host "💾 Next backup in 30 minutes"
          Write-Host "⚠️  Server will run for up to 6 hours"
          Write-Host ""
          
          function Create-WorldBackup {
              param($backupType = "scheduled")
              
              $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
              $backupName = "${backupType}_backup_$timestamp"
              $backupPath = "C:\WorldBackups\$backupName.zip"
              
              Write-Host "💾 Creating $backupType backup: $backupName"
              
              $worldsPath = "C:\MinecraftServer\worlds"
              
              if (Test-Path $worldsPath) {
                  $worldContent = Get-ChildItem $worldsPath -Recurse -ErrorAction SilentlyContinue
                  if ($worldContent.Count -gt 0) {
                      try {
                          Compress-Archive -Path "$worldsPath\*" -DestinationPath $backupPath -Force
                          Write-Host "✅ Backup created successfully"
                          return $true
                      } catch {
                          Write-Host "❌ Backup failed: $($_.Exception.Message)"
                          return $false
                      }
                  } else {
                      Write-Host "⚠️ No world data to backup"
                      return $false
                  }
              } else {
                  Write-Host "⚠️ Worlds directory not found"
                  return $false
              }
          }
          
          try {
              while ($true) {
                  $counter++
                  $elapsed = (Get-Date) - $startTime
                  $elapsedStr = "{0:hh\:mm\:ss}" -f $elapsed
                  
                  # Check if 30 minutes passed since last backup
                  $timeSinceBackup = (Get-Date) - $lastBackup
                  if ($timeSinceBackup.TotalMinutes -ge 30) {
                      $backupCounter++
                      Write-Host ""
                      Write-Host "⏰ Time for scheduled backup #$backupCounter"
                      
                      if (Create-WorldBackup -backupType "scheduled") {
                          $lastBackup = Get-Date
                          $nextBackup = $lastBackup.AddMinutes(30)
                          Write-Host "⏰ Next backup scheduled for: $($nextBackup.ToString('HH:mm:ss'))"
                      }
                      Write-Host ""
                  }
                  
                  # Check server status
                  $serverRunning = Get-Process -Id $env:SERVER_PID -ErrorAction SilentlyContinue
                  $tunnelRunning = Get-Process -Id $env:TUNNEL_PID -ErrorAction SilentlyContinue
                  
                  if ($serverRunning -and $tunnelRunning) {
                      $nextBackupIn = 30 - $timeSinceBackup.TotalMinutes
                      
                      Write-Host "[$elapsedStr] 🎮 SERVER ONLINE | Tunnel: ${{ github.event.inputs.tunnel_service }} | Next backup in: $([math]::Round($nextBackupIn)) min"
                      Write-Host "           📊 Server PID: $env:SERVER_PID | Tunnel PID: $env:TUNNEL_PID | Backups: $backupCounter"
                  } else {
                      Write-Host ""
                      Write-Host "❌ Server or tunnel stopped, creating final backup..."
                      Create-WorldBackup -backupType "final"
                      break
                  }
                  
                  Start-Sleep -Seconds 180  # Status update every 3 minutes
              }
          } catch {
              Write-Host ""
              Write-Host "⚠️ Server monitoring interrupted: $($_.Exception.Message)"
              Write-Host "💾 Creating emergency backup..."
              Create-WorldBackup -backupType "emergency"
              throw
          } finally {
              Write-Host ""
              Write-Host "🔴 Public server session ended"
              Write-Host "📊 Total runtime: $elapsedStr"
              Write-Host "💾 Total backups created: $backupCounter"
              Write-Host ""
              
              # Cleanup processes
              try {
                  if ($env:SERVER_PID) { Stop-Process -Id $env:SERVER_PID -Force -ErrorAction SilentlyContinue }
                  if ($env:TUNNEL_PID) { Stop-Process -Id $env:TUNNEL_PID -Force -ErrorAction SilentlyContinue }
              } catch {
                  Write-Host "Note: Some processes may have already stopped"
              }
          }

      - name: Upload World Backups as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: minecraft-world-backups-${{ github.run_id }}
          path: C:\WorldBackups\*.zip
          retention-days: 30
